// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               v5.29.2
// source: src/app/components/temperature/temperature.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";

export const protobufPackage = "temperature";

export interface GetTemperatureQuery {
  longitude: number;
  latitude: number;
}

export interface TemperatureResponse {
  temperature: number;
}

function createBaseGetTemperatureQuery(): GetTemperatureQuery {
  return { longitude: 0, latitude: 0 };
}

export const GetTemperatureQuery: MessageFns<GetTemperatureQuery> = {
  encode(message: GetTemperatureQuery, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.longitude !== 0) {
      writer.uint32(9).double(message.longitude);
    }
    if (message.latitude !== 0) {
      writer.uint32(17).double(message.latitude);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTemperatureQuery {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTemperatureQuery();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.longitude = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.latitude = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTemperatureQuery {
    return {
      longitude: isSet(object.longitude) ? globalThis.Number(object.longitude) : 0,
      latitude: isSet(object.latitude) ? globalThis.Number(object.latitude) : 0,
    };
  },

  toJSON(message: GetTemperatureQuery): unknown {
    const obj: any = {};
    if (message.longitude !== 0) {
      obj.longitude = message.longitude;
    }
    if (message.latitude !== 0) {
      obj.latitude = message.latitude;
    }
    return obj;
  },

  create(base?: DeepPartial<GetTemperatureQuery>): GetTemperatureQuery {
    return GetTemperatureQuery.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTemperatureQuery>): GetTemperatureQuery {
    const message = createBaseGetTemperatureQuery();
    message.longitude = object.longitude ?? 0;
    message.latitude = object.latitude ?? 0;
    return message;
  },
};

function createBaseTemperatureResponse(): TemperatureResponse {
  return { temperature: 0 };
}

export const TemperatureResponse: MessageFns<TemperatureResponse> = {
  encode(message: TemperatureResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.temperature !== 0) {
      writer.uint32(9).double(message.temperature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TemperatureResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTemperatureResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.temperature = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TemperatureResponse {
    return { temperature: isSet(object.temperature) ? globalThis.Number(object.temperature) : 0 };
  },

  toJSON(message: TemperatureResponse): unknown {
    const obj: any = {};
    if (message.temperature !== 0) {
      obj.temperature = message.temperature;
    }
    return obj;
  },

  create(base?: DeepPartial<TemperatureResponse>): TemperatureResponse {
    return TemperatureResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TemperatureResponse>): TemperatureResponse {
    const message = createBaseTemperatureResponse();
    message.temperature = object.temperature ?? 0;
    return message;
  },
};

export type TemperatureServiceDefinition = typeof TemperatureServiceDefinition;
export const TemperatureServiceDefinition = {
  name: "TemperatureService",
  fullName: "temperature.TemperatureService",
  methods: {
    getTemperature: {
      name: "GetTemperature",
      requestType: GetTemperatureQuery,
      requestStream: false,
      responseType: TemperatureResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface TemperatureServiceImplementation<CallContextExt = {}> {
  getTemperature(
    request: GetTemperatureQuery,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TemperatureResponse>>;
}

export interface TemperatureServiceClient<CallOptionsExt = {}> {
  getTemperature(
    request: DeepPartial<GetTemperatureQuery>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TemperatureResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
