// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               v5.29.2
// source: src/app/components/temperature/temperature.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';

export const protobufPackage = 'temperature';

export interface GetTemperatureQuery {
  longitude: number;
  latitude: number;
}

export interface TemperatureResponse {
  temperature: number;
}

function createBaseGetTemperatureQuery(): GetTemperatureQuery {
  return { longitude: 0, latitude: 0 };
}

export const GetTemperatureQuery: MessageFns<GetTemperatureQuery> = {
  encode(
    message: GetTemperatureQuery,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.longitude !== 0) {
      writer.uint32(9).double(message.longitude);
    }
    if (message.latitude !== 0) {
      writer.uint32(17).double(message.latitude);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): GetTemperatureQuery {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTemperatureQuery();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.longitude = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.latitude = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTemperatureQuery {
    return {
      longitude: isSet(object.longitude)
        ? globalThis.Number(object.longitude)
        : 0,
      latitude: isSet(object.latitude) ? globalThis.Number(object.latitude) : 0,
    };
  },

  toJSON(message: GetTemperatureQuery): unknown {
    const obj: any = {};
    if (message.longitude !== 0) {
      obj.longitude = message.longitude;
    }
    if (message.latitude !== 0) {
      obj.latitude = message.latitude;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTemperatureQuery>, I>>(
    base?: I
  ): GetTemperatureQuery {
    return GetTemperatureQuery.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTemperatureQuery>, I>>(
    object: I
  ): GetTemperatureQuery {
    const message = createBaseGetTemperatureQuery();
    message.longitude = object.longitude ?? 0;
    message.latitude = object.latitude ?? 0;
    return message;
  },
};

function createBaseTemperatureResponse(): TemperatureResponse {
  return { temperature: 0 };
}

export const TemperatureResponse: MessageFns<TemperatureResponse> = {
  encode(
    message: TemperatureResponse,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.temperature !== 0) {
      writer.uint32(9).double(message.temperature);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): TemperatureResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTemperatureResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.temperature = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TemperatureResponse {
    return {
      temperature: isSet(object.temperature)
        ? globalThis.Number(object.temperature)
        : 0,
    };
  },

  toJSON(message: TemperatureResponse): unknown {
    const obj: any = {};
    if (message.temperature !== 0) {
      obj.temperature = message.temperature;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TemperatureResponse>, I>>(
    base?: I
  ): TemperatureResponse {
    return TemperatureResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TemperatureResponse>, I>>(
    object: I
  ): TemperatureResponse {
    const message = createBaseTemperatureResponse();
    message.temperature = object.temperature ?? 0;
    return message;
  },
};

export interface TemperatureService {
  GetTemperature(request: GetTemperatureQuery): Promise<TemperatureResponse>;
}

export const TemperatureServiceServiceName = 'temperature.TemperatureService';
export class TemperatureServiceClientImpl implements TemperatureService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || TemperatureServiceServiceName;
    this.rpc = rpc;
    this.GetTemperature = this.GetTemperature.bind(this);
  }
  GetTemperature(request: GetTemperatureQuery): Promise<TemperatureResponse> {
    const data = GetTemperatureQuery.encode(request).finish();
    const promise = this.rpc.request(this.service, 'GetTemperature', data);
    return promise.then((data) =>
      TemperatureResponse.decode(new BinaryReader(data))
    );
  }
}

interface Rpc {
  request(
    service: string,
    method: string,
    data: Uint8Array
  ): Promise<Uint8Array>;
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
  ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U>
  ? ReadonlyArray<DeepPartial<U>>
  : T extends {}
  ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
